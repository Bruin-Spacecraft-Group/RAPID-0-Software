"""
Driver module for the ArduCam 5MP Mini SPI breakout board.
"""

import busio
import bitbangio
import time as utime
import digitalio


MAX_FIFO_SIZE=0x7FFFFF
ARDUCHIP_FRAMES=0x01
ARDUCHIP_TIM=0x03
VSYNC_LEVEL_MASK=0x02
ARDUCHIP_TRIG=0x41
CAP_DONE_MASK=0x08

OV5642_CHIPID_HIGH=0x300a
OV5642_CHIPID_LOW=0x300b

OV5642_320x240  =0
OV5642_640x480  =1
OV5642_1024x768 =2
OV5642_1280x960 =3
OV5642_1600x1200=4
OV5642_2048x1536=5
OV5642_2592x1944=6
OV5642_1920x1080=7

Advanced_AWB =0
Simple_AWB   =1
Manual_day   =2
Manual_A     =3
Manual_cwf   =4
Manual_cloudy=5

degree_180=0
degree_150=1
degree_120=2
degree_90 =3
degree_60 =4
degree_30 =5
degree_0  =6
degree30  =7
degree60  =8
degree90  =9
degree120 =10
degree150 =11

Auto   =0
Sunny  =1
Cloudy =2
Office =3
Home   =4

Antique     =0
Bluish      =1
Greenish    =2
Reddish     =3
BW          =4
Negative    =5
BWnegative  =6
Normal      =7
Sepia       =8
Overexposure=9
Solarize    =10
Blueish     =11
Yellowish   =12

Exposure_17_EV  =0
Exposure_13_EV  =1
Exposure_10_EV  =2
Exposure_07_EV  =3
Exposure_03_EV  =4
Exposure_default=5
Exposure03_EV   =6
Exposure07_EV   =7
Exposure10_EV   =8
Exposure13_EV   =9
Exposure17_EV   =10

Auto_Sharpness_default=0
Auto_Sharpness1       =1
Auto_Sharpness2       =2
Manual_Sharpnessoff   =3
Manual_Sharpness1     =4
Manual_Sharpness2     =5
Manual_Sharpness3     =6
Manual_Sharpness4     =7
Manual_Sharpness5     =8

MIRROR     =0
FLIP       =1
MIRROR_FLIP=2

Saturation4 =0
Saturation3 =1
Saturation2 =2
Saturation1 =3
Saturation0 =4
Saturation_1=5
Saturation_2=6
Saturation_3=7
Saturation_4=8

Brightness4 =0
Brightness3 =1
Brightness2 =2
Brightness1 =3
Brightness0 =4
Brightness_1=5
Brightness_2=6
Brightness_3=7
Brightness_4=8

Contrast4 =0
Contrast3 =1
Contrast2 =2
Contrast1 =3
Contrast0 =4
Contrast_1=5
Contrast_2=6
Contrast_3=7
Contrast_4=8

Antique      = 0
Bluish       = 1
Greenish     = 2
Reddish      = 3
BW           = 4
Negative     = 5
BWnegative   = 6
Normal       = 7
Sepia        = 8
Overexposure = 9
Solarize     = 10
Blueish      = 11
Yellowish    = 12

high_quality   =0
default_quality=1
low_quality    =2

Color_bar   =0
Color_square=1
BW_square   =2
DLI         =3

BMP =0
JPEG=1
RAW =2

ov5642_RAW = [
    [0x3103,0x03],
    [0x3008,0x82],
    [0x3017,0x7f],
    [0x3018,0xfc],
    [0x3810,0xc2],
    [0x3615,0xf0],
    [0x3000,0x00],
    [0x3001,0x00],
    [0x3002,0x00],
    [0x3003,0x00],
    [0x3011,0x08],
    [0x3010,0x30],
    [0x3604,0x60],
    [0x3622,0x08],
    [0x3621,0x17],
    [0x3709,0x00],
    [0x4000,0x21],
    [0x401d,0x02],
    [0x3600,0x54],
    [0x3605,0x04],
    [0x3606,0x3f],
    [0x3c01,0x80],
    [0x300d,0x21],
    [0x3623,0x22],
    [0x5000,0xcf],
    [0x5001,0xFF],
    [0x5020,0x04],
    [0x5181,0x79],
    [0x5182,0x00],
    [0x5185,0x22],
    [0x5197,0x01],
    [0x5500,0x0a],
    [0x5504,0x00],
    [0x5505,0x7f],
    [0x5080,0x08],
    [0x300e,0x18],
    [0x4610,0x00],
    [0x471d,0x05],
    [0x4708,0x06],
    [0x3710,0x10],
    [0x370d,0x06],
    [0x3632,0x41],
    [0x3702,0x40],
    [0x3620,0x37],
    [0x3631,0x01],
    [0x370c,0xa0],
    [0x3808,0x0a],
    [0x3809,0x20],
    [0x380a,0x07],
    [0x380b,0x98],
    [0x380c,0x0c],
    [0x380d,0x80],
    [0x380e,0x07],
    [0x380f,0xd0],
    [0x5000,0x06],
    [0x501f,0x03],
    [0x3503,0x07],
    [0x3501,0x73],
    [0x3502,0x80],
    [0x350b,0x00],
    [0x3818,0xc0],
    [0x3621,0x27],
    [0x3801,0x8a],
    [0x3a00,0x78],
    [0x3a1a,0x04],
    [0x3a13,0x30],
    [0x3a18,0x00],
    [0x3a19,0x7c],
    [0x3a08,0x12],
    [0x3a09,0xc0],
    [0x3a0a,0x0f],
    [0x3a0b,0xa0],
    [0x3004,0xff],
    [0x350c,0x07],
    [0x350d,0xd0],
    [0x3a0d,0x08],
    [0x3a0e,0x06],
    [0x3500,0x00],
    [0x3501,0x00],
    [0x3502,0x00],
    [0x350a,0x00],
    [0x350b,0x00],
    [0x3503,0x00],
    [0x3030,0x2b],
    [0x3a02,0x00],
    [0x3a03,0x7d],
    [0x3a04,0x00],
    [0x3a14,0x00],
    [0x3a15,0x7d],
    [0x3a16,0x00],
    [0x3a00,0x78],
    [0x3a08,0x09],
    [0x3a09,0x60],
    [0x3a0a,0x07],
    [0x3a0b,0xd0],
    [0x3a0d,0x10],
    [0x3a0e,0x0d],
    [0x3620,0x57],
    [0x3703,0x98],
    [0x3704,0x1c],
    [0x589b,0x00],
    [0x589a,0xc0],
    [0x3633,0x07],
    [0x3702,0x10],
    [0x3703,0xb2],
    [0x3704,0x18],
    [0x370b,0x40],
    [0x370d,0x02],
    [0x3620,0x52],
    [0x5000,0x06],
    [0x5001,0xff],
    [0x5005,0x00],
    [0x3818,0x80],
    [0x3621,0x17],
    [0x3801,0xb4],
    [0x3001,0x40],
    [0x3002,0x1c],
    [0x3810,0x00],
    [0x3818,0x00],
    [0x460c,0x20],
    [0x501f,0x03],
    [0x4300,0xf8],
    [0xffff,0xff],
]

OV5642_1280x960_RAW = [
    [0x3103,0x93],
    [0x3008,0x02],
    [0x3017,0x7f],
    [0x3018,0xf0],
    [0x3615,0xf0],
    [0x3000,0xF8],
    [0x3001,0x48],
    [0x3002,0x5c],
    [0x3003,0x02],
    [0x3005,0xB7],
    [0x3006,0x43],
    [0x3007,0x37],
    [0x300f,0x06],
    [0x3011,0x08],
    [0x3010,0x20],
    [0x3012,0x00],
    [0x460c,0x22],
    [0x3815,0x04],
    [0x370c,0xA0],
    [0x3602,0xFC],
    [0x3612,0xFF],
    [0x3634,0xC0],
    [0x3613,0x00],
    [0x3622,0x00],
    [0x3603,0x27],
    [0x4000,0x21],
    [0x401D,0x02],
    [0x3600,0x54],
    [0x3605,0x04],
    [0x3606,0x3F],
    [0x5020,0x04],
    [0x5197,0x01],
    [0x5001,0xFF],
    [0x5500,0x10],
    [0x5502,0x00],
    [0x5503,0x04],
    [0x5504,0x00],
    [0x5505,0x7F],
    [0x5080,0x08],
    [0x300E,0x18],
    [0x4610,0x00],
    [0x471D,0x05],
    [0x4708,0x06],
    [0x3710,0x10],
    [0x3632,0x41],
    [0x3631,0x01],
    [0x501F,0x03],
    [0x3604,0x40],
    [0x4300,0x00],
    [0x3824,0x11],
    [0x5000,0x4F],
    [0x3818,0xC1],
    [0x3705,0xDB],
    [0x370A,0x81],
    [0x3621,0xC7],
    [0x3800,0x03],
    [0x3801,0xE8],
    [0x3802,0x03],
    [0x3803,0xE8],
    [0x3804,0x38],
    [0x3805,0x00],
    [0x3806,0x03],
    [0x3807,0xC0],
    [0x3808,0x05],
    [0x3809,0x00],
    [0x380A,0x03],
    [0x380B,0xC0],
    [0x380C,0x0A],
    [0x380D,0xF0],
    [0x380E,0x03],
    [0x380F,0xE8],
    [0x3827,0x08],
    [0x3810,0xC0],
    [0x5683,0x00],
    [0x5686,0x03],
    [0x5687,0xC0],
    [0x3A1A,0x04],
    [0x3A13,0x30],
    [0x3004,0xDF],
    [0x350C,0x07],
    [0x350D,0xD0],
    [0x3500,0x35],
    [0x3501,0x00],
    [0x3502,0x00],
    [0x350A,0x00],
    [0x350B,0x00],
    [0x3503,0x00],
    [0x5682,0x05],
    [0x3A0F,0x78],
    [0x3A11,0xD0],
    [0x3A1B,0x7A],
    [0x3A1E,0x66],
    [0x3A1F,0x40],
    [0x3A10,0x68],
    [0x3030,0x0B],
    [0x3A01,0x04],
    [0x3A02,0x00],
    [0x3A03,0x78],
    [0x3A04,0x00],
    [0x3A05,0x30],
    [0x3A14,0x00],
    [0x3A15,0x64],
    [0x3A16,0x00],
    [0x3A17,0x89],
    [0x3A18,0x00],
    [0x3A19,0x70],
    [0x3A00,0x78],
    [0x3A08,0x12],
    [0x3A09,0xC0],
    [0x3A0A,0x0F],
    [0x3A0B,0xA0],
    [0x3A0D,0x04],
    [0x3A0E,0x03],
    [0x3C00,0x04],
    [0x3C01,0xB4],
    [0x5688,0xFD],
    [0x5689,0xDF],
    [0x568A,0xFE],
    [0x568B,0xEF],
    [0x568C,0xFE],
    [0x568D,0xEF],
    [0x568E,0xAA],
    [0x568F,0xAA],
    [0x589B,0x04],
    [0x589A,0xC5],
    [0x528A,0x00],
    [0x528B,0x02],
    [0x528C,0x08],
    [0x528D,0x10],
    [0x528E,0x20],
    [0x528F,0x28],
    [0x5290,0x30],
    [0x5292,0x00],
    [0x5293,0x00],
    [0x5294,0x00],
    [0x5295,0x02],
    [0x5296,0x00],
    [0x5297,0x08],
    [0x5298,0x00],
    [0x5299,0x10],
    [0x529A,0x00],
    [0x529B,0x20],
    [0x529C,0x00],
    [0x529D,0x28],
    [0x529E,0x00],
    [0x5282,0x00],
    [0x529F,0x30],
    [0x5300,0x00],
    [0x5302,0x00],
    [0x5303,0x7C],
    [0x530C,0x00],
    [0x530D,0x0C],
    [0x530E,0x20],
    [0x530F,0x80],
    [0x5310,0x20],
    [0x5311,0x80],
    [0x5308,0x20],
    [0x5309,0x40],
    [0x5304,0x00],
    [0x5305,0x30],
    [0x5306,0x00],
    [0x5307,0x80],
    [0x5314,0x08],
    [0x5315,0x20],
    [0x5319,0x30],
    [0x5316,0x10],
    [0x5317,0x08],
    [0x5318,0x02],
    [0x5380,0x01],
    [0x5381,0x20],
    [0x5382,0x00],
    [0x5383,0x4E],
    [0x5384,0x00],
    [0x5385,0x0F],
    [0x5386,0x00],
    [0x5387,0x00],
    [0x5388,0x01],
    [0x5389,0x15],
    [0x538A,0x00],
    [0x538B,0x31],
    [0x538C,0x00],
    [0x538D,0x00],
    [0x538E,0x00],
    [0x538F,0x0F],
    [0x5390,0x00],
    [0x5391,0xAB],
    [0x5392,0x00],
    [0x5393,0xA2],
    [0x5394,0x08],
    [0x5301,0x20],
    [0x5480,0x14],
    [0x5482,0x03],
    [0x5483,0x57],
    [0x5484,0x65],
    [0x5485,0x71],
    [0x5481,0x21],
    [0x5486,0x7D],
    [0x5487,0x87],
    [0x5488,0x91],
    [0x5489,0x9A],
    [0x548A,0xAA],
    [0x548B,0xB8],
    [0x548C,0xCD],
    [0x548D,0xDD],
    [0x548E,0xEA],
    [0x548F,0x10],
    [0x5490,0x05],
    [0x5491,0x00],
    [0x5492,0x04],
    [0x5493,0x20],
    [0x5494,0x03],
    [0x5495,0x60],
    [0x5496,0x02],
    [0x5497,0xB8],
    [0x5498,0x02],
    [0x5499,0x86],
    [0x549A,0x02],
    [0x549B,0x5B],
    [0x549C,0x02],
    [0x549D,0x3B],
    [0x549E,0x02],
    [0x549F,0x1C],
    [0x54A0,0x02],
    [0x54A1,0x04],
    [0x54A2,0x01],
    [0x54A3,0xED],
    [0x54A4,0x01],
    [0x54A5,0xC5],
    [0x54A6,0x01],
    [0x54A7,0xA5],
    [0x54A8,0x01],
    [0x54A9,0x6C],
    [0x54AA,0x01],
    [0x54AB,0x41],
    [0x54AC,0x01],
    [0x54AD,0x20],
    [0x54AE,0x00],
    [0x54AF,0x16],
    [0x3406,0x00],
    [0x5192,0x04],
    [0x5191,0xF8],
    [0x5193,0x70],
    [0x5194,0xF0],
    [0x5195,0xF0],
    [0x518D,0x3D],
    [0x518F,0x54],
    [0x518E,0x3D],
    [0x5190,0x54],
    [0x518B,0xC0],
    [0x518C,0xBD],
    [0x5187,0x18],
    [0x5188,0x18],
    [0x5189,0x6E],
    [0x518A,0x68],
    [0x5186,0x1C],
    [0x5181,0x50],
    [0x5182,0x11],
    [0x5183,0x14],
    [0x5184,0x25],
    [0x5185,0x24],
    [0x5025,0x82],
    [0x5583,0x40],
    [0x5584,0x40],
    [0x5580,0x02],
    [0x3633,0x07],
    [0x3702,0x10],
    [0x3703,0xB2],
    [0x3704,0x18],
    [0x370B,0x40],
    [0x370D,0x02],
    [0x3620,0x52],
    [0xffff,0xff],
]

OV5642_1920x1080_RAW = [
    [0x3808,0x07],
    [0x3809,0x80],
    [0x380A,0x04],
    [0x380B,0x38],
    [0xffff,0xff],
]

OV5642_640x480_RAW = [
    [0x3808,0x02],
    [0x3809,0x80],
    [0x380A,0x01],
    [0x380B,0xe0],
    [0xffff,0xff],
]

ov5642_320x240 = [
    [0x3800 ,0x1 ],
    [0x3801 ,0xa8],
    [0x3802 ,0x0 ],
    [0x3803 ,0xA ],
    [0x3804 ,0xA ],
    [0x3805 ,0x20],
    [0x3806 ,0x7 ],
    [0x3807 ,0x98],
    [0x3808 ,0x1 ],
    [0x3809 ,0x40],
    [0x380a ,0x0 ],
    [0x380b ,0xF0],
    [0x380c ,0xc ],
    [0x380d ,0x80],
    [0x380e ,0x7 ],
    [0x380f ,0xd0],
    [0x5001 ,0x7f],
    [0x5680 ,0x0 ],
    [0x5681 ,0x0 ],
    [0x5682 ,0xA ],
    [0x5683 ,0x20],
    [0x5684 ,0x0 ],
    [0x5685 ,0x0 ],
    [0x5686 ,0x7 ],
    [0x5687 ,0x98],
    [0x3801, 0xb0],
    [0xffff, 0xff],
]

ov5642_640x480 = [
    [0x3800 ,0x1 ],
    [0x3801 ,0xa8],
    [0x3802 ,0x0 ],
    [0x3803 ,0xA ],
    [0x3804 ,0xA ],
    [0x3805 ,0x20],
    [0x3806 ,0x7 ],
    [0x3807 ,0x98],
    [0x3808 ,0x2 ],
    [0x3809 ,0x80],
    [0x380a ,0x1 ],
    [0x380b ,0xe0],
    [0x380c ,0xc ],
    [0x380d ,0x80],
    [0x380e ,0x7 ],
    [0x380f ,0xd0],
    [0x5001 ,0x7f],
    [0x5680 ,0x0 ],
    [0x5681 ,0x0 ],
    [0x5682 ,0xA ],
    [0x5683 ,0x20],
    [0x5684 ,0x0 ],
    [0x5685 ,0x0 ],
    [0x5686 ,0x7 ],
    [0x5687 ,0x98],
    [0x3801, 0xb0],
    [0xffff, 0xff],
]

ov5642_1280x960 = [
    [0x3800 ,0x1 ],
    [0x3801 ,0xB0],
    [0x3802 ,0x0 ],
    [0x3803 ,0xA ],
    [0x3804 ,0xA ],
    [0x3805 ,0x20],
    [0x3806 ,0x7 ],
    [0x3807 ,0x98],
    [0x3808 ,0x5 ],
    [0x3809 ,0x00],
    [0x380a ,0x3 ],
    [0x380b ,0xC0],
    [0x380c ,0xc ],
    [0x380d ,0x80],
    [0x380e ,0x7 ],
    [0x380f ,0xd0],
    [0x5001 ,0x7f],
    [0x5680 ,0x0 ],
    [0x5681 ,0x0 ],
    [0x5682 ,0xA ],
    [0x5683 ,0x20],
    [0x5684 ,0x0 ],
    [0x5685 ,0x0 ],
    [0x5686 ,0x7 ],
    [0x5687 ,0x98],
    [0xffff, 0xff],
]

ov5642_1600x1200 = [
    [0x3800 ,0x1 ],
    [0x3801 ,0xB0],
    [0x3802 ,0x0 ],
    [0x3803 ,0xA ],
    [0x3804 ,0xA ],
    [0x3805 ,0x20],
    [0x3806 ,0x7 ],
    [0x3807 ,0x98],
    [0x3808 ,0x6 ],
    [0x3809 ,0x40],
    [0x380a ,0x4 ],
    [0x380b ,0xB0],
    [0x380c ,0xc ],
    [0x380d ,0x80],
    [0x380e ,0x7 ],
    [0x380f ,0xd0],
    [0x5001 ,0x7f],
    [0x5680 ,0x0 ],
    [0x5681 ,0x0 ],
    [0x5682 ,0xA ],
    [0x5683 ,0x20],
    [0x5684 ,0x0 ],
    [0x5685 ,0x0 ],
    [0x5686 ,0x7 ],
    [0x5687 ,0x98],
    [0xffff, 0xff],
]

ov5642_1024x768 = [
    [0x3800 ,0x1 ],
    [0x3801 ,0xB0],
    [0x3802 ,0x0 ],
    [0x3803 ,0xA ],
    [0x3804 ,0xA ],
    [0x3805 ,0x20],
    [0x3806 ,0x7 ],
    [0x3807 ,0x98],
    [0x3808 ,0x4 ],
    [0x3809 ,0x0],
    [0x380a ,0x3 ],
    [0x380b ,0x0],
    [0x380c ,0xc ],
    [0x380d ,0x80],
    [0x380e ,0x7 ],
    [0x380f ,0xd0],
    [0x5001 ,0x7f],
    [0x5680 ,0x0 ],
    [0x5681 ,0x0 ],
    [0x5682 ,0xA ],
    [0x5683 ,0x20],
    [0x5684 ,0x0 ],
    [0x5685 ,0x0 ],
    [0x5686 ,0x7 ],
    [0x5687 ,0x98],
    [0xffff, 0xff],
]

ov5642_2048x1536 = [
    [0x3800 ,0x01],
    [0x3801 ,0xb0],
    [0x3802 ,0x00],
    [0x3803 ,0x0a],
    [0x3804 ,0x0a],
    [0x3805 ,0x20],
    [0x3806 ,0x07],
    [0x3807 ,0x98],
    [0x3808 ,0x08],
    [0x3809 ,0x00],
    [0x380a ,0x06],
    [0x380b ,0x00],
    [0x380c ,0x0c],
    [0x380d ,0x80],
    [0x380e ,0x07],
    [0x380f ,0xd0],
    [0x3810 ,0xc2],
    [0x3815 ,0x44],
    [0x3818 ,0xa8],
    [0x3824 ,0x01],
    [0x3827 ,0x0a],
    [0x3a00 ,0x78],
    [0x3a0d ,0x10],
    [0x3a0e ,0x0d],
    [0x3a00 ,0x78],
    [0x460b ,0x35],
    [0x471d ,0x00],
    [0x471c ,0x50],
    [0x5682 ,0x0a],
    [0x5683 ,0x20],
    [0x5686 ,0x07],
    [0x5687 ,0x98],
    [0x589b ,0x00],
    [0x589a ,0xc0],
    [0x589b ,0x00],
    [0x589a ,0xc0],
    [0x3002 ,0x0c],
    [0x3002 ,0x00],
    [0x4300 ,0x32],
    [0x460b ,0x35],
    [0x3002 ,0x0c],
    [0x3002 ,0x00],
    [0x4713 ,0x02],
    [0x4600 ,0x80],
    [0x4721 ,0x02],
    [0x471c ,0x40],
    [0x4408 ,0x00],
    [0x460c ,0x22],
    [0x3815 ,0x04],
    [0x3818 ,0xc8],
    [0x501f ,0x00],
    [0x5002 ,0xe0],
    [0x440a ,0x01],
    [0x4402 ,0x90],
    [0x3811 ,0xf0],
    [0x3818, 0xa8],
    [0x3621, 0x10],
    [0xffff, 0xff],
]

ov5642_2592x1944 = [
    [0x3800 ,0x1 ],
    [0x3801 ,0xB0],
    [0x3802 ,0x0 ],
    [0x3803 ,0xA ],
    [0x3804 ,0xA ],
    [0x3805 ,0x20],
    [0x3806 ,0x7 ],
    [0x3807 ,0x98],
    [0x3808 ,0xA ],
    [0x3809 ,0x20],
    [0x380a ,0x7 ],
    [0x380b ,0x98],
    [0x380c ,0xc ],
    [0x380d ,0x80],
    [0x380e ,0x7 ],
    [0x380f ,0xd0],
    [0x5001 ,0x7f],
    [0x5680 ,0x0 ],
    [0x5681 ,0x0 ],
    [0x5682 ,0xA ],
    [0x5683 ,0x20],
    [0x5684 ,0x0 ],
    [0x5685 ,0x0 ],
    [0x5686 ,0x7 ],
    [0x5687 ,0x98],
    [0xffff, 0xff],
]

ov5642_dvp_zoom8 = [
    [0x3800 ,0x5 ],
    [0x3801 ,0xf8],
    [0x3802 ,0x3 ],
    [0x3803 ,0x5c],
    [0x3804 ,0x1 ],
    [0x3805 ,0x44],
    [0x3806 ,0x0 ],
    [0x3807 ,0xf0],
    [0x3808 ,0x1 ],
    [0x3809 ,0x40],
    [0x380a ,0x0 ],
    [0x380b ,0xf0],
    [0x380c ,0xc ],
    [0x380d ,0x80],
    [0x380e ,0x7 ],
    [0x380f ,0xd0],
    [0x5001 ,0x7f],
    [0x5680 ,0x0 ],
    [0x5681 ,0x0 ],
    [0x5682 ,0x1 ],
    [0x5683 ,0x44],
    [0x5684 ,0x0 ],
    [0x5685 ,0x0 ],
    [0x5686 ,0x0 ],
    [0x5687 ,0xf3],
    [0xffff, 0xff],
]

OV5642_QVGA_Preview1 = [
    [0x3103 ,0x93],
    [0x3008 ,0x82],
    [0x3017 ,0x7f],
    [0x3018 ,0xfc],
    [0x3810 ,0xc2],
    [0x3615 ,0xf0],
    [0x3000 ,0x00],
    [0x3001 ,0x00],
    [0x3002 ,0x5c],
    [0x3003 ,0x00],
    [0x3004 ,0xff],
    [0x3005 ,0xff],
    [0x3006 ,0x43],
    [0x3007 ,0x37],
    [0x3011 ,0x08],
    [0x3010 ,0x10],
    [0x460c ,0x22],
    [0x3815 ,0x04],
    [0x370c ,0xa0],
    [0x3602 ,0xfc],
    [0x3612 ,0xff],
    [0x3634 ,0xc0],
    [0x3613 ,0x00],
    [0x3605 ,0x7c],
    [0x3621 ,0x09],
    [0x3622 ,0x60],
    [0x3604 ,0x40],
    [0x3603 ,0xa7],
    [0x3603 ,0x27],
    [0x4000 ,0x21],
    [0x401d ,0x22],
    [0x3600 ,0x54],
    [0x3605 ,0x04],
    [0x3606 ,0x3f],
    [0x3c01 ,0x80],
    [0x5000 ,0x4f],
    [0x5020 ,0x04],
    [0x5181 ,0x79],
    [0x5182 ,0x00],
    [0x5185 ,0x22],
    [0x5197 ,0x01],
    [0x5001 ,0xff],
    [0x5500 ,0x0a],
    [0x5504 ,0x00],
    [0x5505 ,0x7f],
    [0x5080 ,0x08],
    [0x300e ,0x18],
    [0x4610 ,0x00],
    [0x471d ,0x05],
    [0x4708 ,0x06],
    [0x3808 ,0x02],
    [0x3809 ,0x80],
    [0x380a ,0x01],
    [0x380b ,0xe0],
    [0x380e ,0x07],
    [0x380f ,0xd0],
    [0x501f ,0x00],
    [0x5000 ,0x4f],
    [0x4300 ,0x30],
    [0x3503 ,0x07],
    [0x3501 ,0x73],
    [0x3502 ,0x80],
    [0x350b ,0x00],
    [0x3503 ,0x07],
    [0x3824 ,0x11],
    [0x3501 ,0x1e],
    [0x3502 ,0x80],
    [0x350b ,0x7f],
    [0x380c ,0x0c],
    [0x380d ,0x80],
    [0x380e ,0x03],
    [0x380f ,0xe8],
    [0x3a0d ,0x04],
    [0x3a0e ,0x03],
    [0x3818 ,0xc1],
    [0x3705 ,0xdb],
    [0x370a ,0x81],
    [0x3801 ,0x80],
    [0x3621 ,0x87],
    [0x3801 ,0x50],
    [0x3803 ,0x08],
    [0x3827 ,0x08],
    [0x3810 ,0x40],
    [0x3804 ,0x05],
    [0x3805 ,0x00],
    [0x5682 ,0x05],
    [0x5683 ,0x00],
    [0x3806 ,0x03],
    [0x3807 ,0xc0],
    [0x5686 ,0x03],
    [0x5687 ,0xbc],
    [0x3a00 ,0x78],
    [0x3a1a ,0x05],
    [0x3a13 ,0x30],
    [0x3a18 ,0x00],
    [0x3a19 ,0x7c],
    [0x3a08 ,0x12],
    [0x3a09 ,0xc0],
    [0x3a0a ,0x0f],
    [0x3a0b ,0xa0],
    [0x350c ,0x07],
    [0x350d ,0xd0],
    [0x3500 ,0x00],
    [0x3501 ,0x00],
    [0x3502 ,0x00],
    [0x350a ,0x00],
    [0x350b ,0x00],
    [0x3503 ,0x00],
    [0x528a ,0x02],
    [0x528b ,0x04],
    [0x528c ,0x08],
    [0x528d ,0x08],
    [0x528e ,0x08],
    [0x528f ,0x10],
    [0x5290 ,0x10],
    [0x5292 ,0x00],
    [0x5293 ,0x02],
    [0x5294 ,0x00],
    [0x5295 ,0x02],
    [0x5296 ,0x00],
    [0x5297 ,0x02],
    [0x5298 ,0x00],
    [0x5299 ,0x02],
    [0x529a ,0x00],
    [0x529b ,0x02],
    [0x529c ,0x00],
    [0x529d ,0x02],
    [0x529e ,0x00],
    [0x529f ,0x02],
    [0x3030 ,0x0b],
    [0x3a02 ,0x00],
    [0x3a03 ,0x7d],
    [0x3a04 ,0x00],
    [0x3a14 ,0x00],
    [0x3a15 ,0x7d],
    [0x3a16 ,0x00],
    [0x3a00 ,0x78],
    [0x3a08 ,0x09],
    [0x3a09 ,0x60],
    [0x3a0a ,0x07],
    [0x3a0b ,0xd0],
    [0x3a0d ,0x08],
    [0x3a0e ,0x06],
    [0x5193 ,0x70],
    [0x589b ,0x04],
    [0x589a ,0xc5],
    [0x401e ,0x20],
    [0x4001 ,0x42],
    [0x401c ,0x04],
    [0x528a ,0x01],
    [0x528b ,0x04],
    [0x528c ,0x08],
    [0x528d ,0x10],
    [0x528e ,0x20],
    [0x528f ,0x28],
    [0x5290 ,0x30],
    [0x5292 ,0x00],
    [0x5293 ,0x01],
    [0x5294 ,0x00],
    [0x5295 ,0x04],
    [0x5296 ,0x00],
    [0x5297 ,0x08],
    [0x5298 ,0x00],
    [0x5299 ,0x10],
    [0x529a ,0x00],
    [0x529b ,0x20],
    [0x529c ,0x00],
    [0x529d ,0x28],
    [0x529e ,0x00],
    [0x529f ,0x30],
    [0x5282 ,0x00],
    [0x5300 ,0x00],
    [0x5301 ,0x20],
    [0x5302 ,0x00],
    [0x5303 ,0x7c],
    [0x530c ,0x00],
    [0x530d ,0x0c],
    [0x530e ,0x20],
    [0x530f ,0x80],
    [0x5310 ,0x20],
    [0x5311 ,0x80],
    [0x5308 ,0x20],
    [0x5309 ,0x40],
    [0x5304 ,0x00],
    [0x5305 ,0x30],
    [0x5306 ,0x00],
    [0x5307 ,0x80],
    [0x5314 ,0x08],
    [0x5315 ,0x20],
    [0x5319 ,0x30],
    [0x5316 ,0x10],
    [0x5317 ,0x00],
    [0x5318 ,0x02],
    [0x5402 ,0x3f],
    [0x5403 ,0x00],
    [0x3406 ,0x00],
    [0x5180 ,0xff],
    [0x5181 ,0x52],
    [0x5182 ,0x11],
    [0x5183 ,0x14],
    [0x5184 ,0x25],
    [0x5185 ,0x24],
    [0x5186 ,0x06],
    [0x5187 ,0x08],
    [0x5188 ,0x08],
    [0x5189 ,0x7c],
    [0x518a ,0x60],
    [0x518b ,0xb2],
    [0x518c ,0xb2],
    [0x518d ,0x44],
    [0x518e ,0x3d],
    [0x518f ,0x58],
    [0x5190 ,0x46],
    [0x5191 ,0xf8],
    [0x5192 ,0x04],
    [0x5193 ,0x70],
    [0x5194 ,0xf0],
    [0x5195 ,0xf0],
    [0x5196 ,0x03],
    [0x5197 ,0x01],
    [0x5198 ,0x04],
    [0x5199 ,0x12],
    [0x519a ,0x04],
    [0x519b ,0x00],
    [0x519c ,0x06],
    [0x519d ,0x82],
    [0x519e ,0x00],
    [0x5025 ,0x80],
    [0x5583 ,0x40],
    [0x5584 ,0x40],
    [0x5580 ,0x02],
    [0x5000 ,0xcf],
    [0x3710 ,0x10],
    [0x3632 ,0x51],
    [0x3702 ,0x10],
    [0x3703 ,0xb2],
    [0x3704 ,0x18],
    [0x370b ,0x40],
    [0x370d ,0x03],
    [0x3631 ,0x01],
    [0x3632 ,0x52],
    [0x3606 ,0x24],
    [0x3620 ,0x96],
    [0x5785 ,0x07],
    [0x3a13 ,0x30],
    [0x3600 ,0x52],
    [0x3604 ,0x48],
    [0x3606 ,0x1b],
    [0x370d ,0x0b],
    [0x370f ,0xc0],
    [0x3709 ,0x01],
    [0x3823 ,0x00],
    [0x5007 ,0x00],
    [0x5009 ,0x00],
    [0x5011 ,0x00],
    [0x5013 ,0x00],
    [0x519e ,0x00],
    [0x5086 ,0x00],
    [0x5087 ,0x00],
    [0x5088 ,0x00],
    [0x5089 ,0x00],
    [0x302b ,0x00],
    [0x3808 ,0x01],
    [0x3809 ,0x40],
    [0x380a ,0x00],
    [0x380b ,0xf0],
    [0x3a00 ,0x78],
    [0x5001 ,0xFF],
    [0x5583 ,0x50],
    [0x5584 ,0x50],
    [0x5580 ,0x02],
    [0x3c01 ,0x80],
    [0x3c00 ,0x04],         
    [0x5800 ,0x48],
    [0x5801 ,0x31],
    [0x5802 ,0x21],
    [0x5803 ,0x1b],
    [0x5804 ,0x1a],
    [0x5805 ,0x1e],
    [0x5806 ,0x29],
    [0x5807 ,0x38],
    [0x5808 ,0x26],
    [0x5809 ,0x17],
    [0x580a ,0x11],
    [0x580b ,0xe ],
    [0x580c ,0xd ],
    [0x580d ,0xe ],
    [0x580e ,0x13],
    [0x580f ,0x1a],
    [0x5810 ,0x15],
    [0x5811 ,0xd ],
    [0x5812 ,0x8 ],
    [0x5813 ,0x5 ],
    [0x5814 ,0x4 ],
    [0x5815 ,0x5 ],
    [0x5816 ,0x9 ],
    [0x5817 ,0xd ],
    [0x5818 ,0x11],
    [0x5819 ,0xa ],
    [0x581a ,0x4 ],
    [0x581b ,0x0 ],
    [0x581c ,0x0 ],
    [0x581d ,0x1 ],
    [0x581e ,0x6 ],
    [0x581f ,0x9 ],
    [0x5820 ,0x12],
    [0x5821 ,0xb ],
    [0x5822 ,0x4 ],
    [0xffff,0xff],
]
OV5642_QVGA_Preview2 = [
    [0x5823 ,0x0 ],
    [0x5824 ,0x0 ],
    [0x5825 ,0x1 ],
    [0x5826 ,0x6 ],
    [0x5827 ,0xa ],
    [0x5828 ,0x17],
    [0x5829 ,0xf ],
    [0x582a ,0x9 ],
    [0x582b ,0x6 ],
    [0x582c ,0x5 ],
    [0x582d ,0x6 ],
    [0x582e ,0xa ],
    [0x582f ,0xe ],
    [0x5830 ,0x28],
    [0x5831 ,0x1a],
    [0x5832 ,0x11],
    [0x5833 ,0xe ],
    [0x5834 ,0xe ],
    [0x5835 ,0xf ],
    [0x5836 ,0x15],
    [0x5837 ,0x1d],
    [0x5838 ,0x6e],
    [0x5839 ,0x39],
    [0x583a ,0x27],
    [0x583b ,0x1f],
    [0x583c ,0x1e],
    [0x583d ,0x23],
    [0x583e ,0x2f],
    [0x583f ,0x41],
    [0x5840 ,0xe ],
    [0x5841 ,0xc ],
    [0x5842 ,0xd ],
    [0x5843 ,0xc ],
    [0x5844 ,0xc ],
    [0x5845 ,0xc ],
    [0x5846 ,0xc ],
    [0x5847 ,0xc ],
    [0x5848 ,0xd ],
    [0x5849 ,0xe ],
    [0x584a ,0xe ],
    [0x584b ,0xa ],
    [0x584c ,0xe ],
    [0x584d ,0xe ],
    [0x584e ,0x10],
    [0x584f ,0x10],
    [0x5850 ,0x11],
    [0x5851 ,0xa ],
    [0x5852 ,0xf ],
    [0x5853 ,0xe ],
    [0x5854 ,0x10],
    [0x5855 ,0x10],
    [0x5856 ,0x10],
    [0x5857 ,0xa ],
    [0x5858 ,0xe ],
    [0x5859 ,0xe ],
    [0x585a ,0xf ],
    [0x585b ,0xf ],
    [0x585c ,0xf ],
    [0x585d ,0xa ],
    [0x585e ,0x9 ],
    [0x585f ,0xd ],
    [0x5860 ,0xc ],
    [0x5861 ,0xb ],
    [0x5862 ,0xd ],
    [0x5863 ,0x7 ],
    [0x5864 ,0x17],
    [0x5865 ,0x14],
    [0x5866 ,0x18],
    [0x5867 ,0x18],
    [0x5868 ,0x16],
    [0x5869 ,0x12],
    [0x586a ,0x1b],
    [0x586b ,0x1a],
    [0x586c ,0x16],
    [0x586d ,0x16],
    [0x586e ,0x18],
    [0x586f ,0x1f],
    [0x5870 ,0x1c],
    [0x5871 ,0x16],
    [0x5872 ,0x10],
    [0x5873 ,0xf ],
    [0x5874 ,0x13],
    [0x5875 ,0x1c],
    [0x5876 ,0x1e],
    [0x5877 ,0x17],
    [0x5878 ,0x11],
    [0x5879 ,0x11],
    [0x587a ,0x14],
    [0x587b ,0x1e],
    [0x587c ,0x1c],
    [0x587d ,0x1c],
    [0x587e ,0x1a],
    [0x587f ,0x1a],
    [0x5880 ,0x1b],
    [0x5881 ,0x1f],
    [0x5882 ,0x14],
    [0x5883 ,0x1a],
    [0x5884 ,0x1d],
    [0x5885 ,0x1e],
    [0x5886 ,0x1a],
    [0x5887 ,0x1a],       
    [0x5180 ,0xff],
    [0x5181 ,0x52],
    [0x5182 ,0x11],
    [0x5183 ,0x14],
    [0x5184 ,0x25],
    [0x5185 ,0x24],
    [0x5186 ,0x14],
    [0x5187 ,0x14],
    [0x5188 ,0x14],
    [0x5189 ,0x69],
    [0x518a ,0x60],
    [0x518b ,0xa2],
    [0x518c ,0x9c],
    [0x518d ,0x36],
    [0x518e ,0x34],
    [0x518f ,0x54],
    [0x5190 ,0x4c],
    [0x5191 ,0xf8],
    [0x5192 ,0x04],
    [0x5193 ,0x70],
    [0x5194 ,0xf0],
    [0x5195 ,0xf0],
    [0x5196 ,0x03],
    [0x5197 ,0x01],
    [0x5198 ,0x05],
    [0x5199 ,0x2f],
    [0x519a ,0x04],
    [0x519b ,0x00],
    [0x519c ,0x06],
    [0x519d ,0xa0],
    [0x519e ,0xa0],        
    [0x528a ,0x00],
    [0x528b ,0x01],
    [0x528c ,0x04],
    [0x528d ,0x08],
    [0x528e ,0x10],
    [0x528f ,0x20],
    [0x5290 ,0x30],
    [0x5292 ,0x00],
    [0x5293 ,0x00],
    [0x5294 ,0x00],
    [0x5295 ,0x01],
    [0x5296 ,0x00],
    [0x5297 ,0x04],
    [0x5298 ,0x00],
    [0x5299 ,0x08],
    [0x529a ,0x00],
    [0x529b ,0x10],
    [0x529c ,0x00],
    [0x529d ,0x20],
    [0x529e ,0x00],
    [0x529f ,0x30],
    [0x5282 ,0x00],
    [0x5300 ,0x00],
    [0x5301 ,0x20],
    [0x5302 ,0x00],
    [0x5303 ,0x7c],
    [0x530c ,0x00],
    [0x530d ,0x10],
    [0x530e ,0x20],
    [0x530f ,0x80],
    [0x5310 ,0x20],
    [0x5311 ,0x80],
    [0x5308 ,0x20],
    [0x5309 ,0x40],
    [0x5304 ,0x00],
    [0x5305 ,0x30],
    [0x5306 ,0x00],
    [0x5307 ,0x80],
    [0x5314 ,0x08],
    [0x5315 ,0x20],
    [0x5319 ,0x30],
    [0x5316 ,0x10],
    [0x5317 ,0x00],
    [0x5318 ,0x02],         
    [0x5380 ,0x01],  
    [0x5381 ,0x00],  
    [0x5382 ,0x00],  
    [0x5383 ,0x1f],  
    [0x5384 ,0x00],  
    [0x5385 ,0x06],  
    [0x5386 ,0x00],  
    [0x5387 ,0x00],  
    [0x5388 ,0x00],  
    [0x5389 ,0xE1],  
    [0x538A ,0x00],  
    [0x538B ,0x2B],  
    [0x538C ,0x00],  
    [0x538D ,0x00],  
    [0x538E ,0x00],  
    [0x538F ,0x10],  
    [0x5390 ,0x00],  
    [0x5391 ,0xB3],  
    [0x5392 ,0x00],  
    [0x5393 ,0xA6],  
    [0x5394 ,0x08],        
    [0x5480 ,0x0c],  
    [0x5481 ,0x18],  
    [0x5482 ,0x2f],  
    [0x5483 ,0x55],  
    [0x5484 ,0x64],  
    [0x5485 ,0x71],  
    [0x5486 ,0x7d],  
    [0x5487 ,0x87],  
    [0x5488 ,0x91],  
    [0x5489 ,0x9a],  
    [0x548A ,0xaa],  
    [0x548B ,0xb8],  
    [0x548C ,0xcd],  
    [0x548D ,0xdd],  
    [0x548E ,0xea],  
    [0x548F ,0x1d],  
    [0x5490 ,0x05],  
    [0x5491 ,0x00],  
    [0x5492 ,0x04],  
    [0x5493 ,0x20],  
    [0x5494 ,0x03],  
    [0x5495 ,0x60],  
    [0x5496 ,0x02],  
    [0x5497 ,0xB8],  
    [0x5498 ,0x02],  
    [0x5499 ,0x86],  
    [0x549A ,0x02],  
    [0x549B ,0x5B],  
    [0x549C ,0x02],  
    [0x549D ,0x3B],  
    [0x549E ,0x02],  
    [0x549F ,0x1C],  
    [0x54A0 ,0x02],  
    [0x54A1 ,0x04],  
    [0x54A2 ,0x01],  
    [0x54A3 ,0xED],  
    [0x54A4 ,0x01],  
    [0x54A5 ,0xC5],  
    [0x54A6 ,0x01],  
    [0x54A7 ,0xA5],  
    [0x54A8 ,0x01],  
    [0x54A9 ,0x6C],  
    [0x54AA ,0x01],  
    [0x54AB ,0x41],  
    [0x54AC ,0x01],  
    [0x54AD ,0x20],  
    [0x54AE ,0x00],  
    [0x54AF ,0x16],  
    [0x54B0 ,0x01], 
    [0x54B1 ,0x20], 
    [0x54B2 ,0x00],
    [0x54B3 ,0x10], 
    [0x54B4 ,0x00],
    [0x54B5 ,0xf0], 
    [0x54B6 ,0x00],
    [0x54B7 ,0xDF], 
    [0x5402 ,0x3f], 
    [0x5403 ,0x00],
    [0x5500 ,0x10],
    [0x5502 ,0x00],
    [0x5503 ,0x06],
    [0x5504 ,0x00],
    [0x5505 ,0x7f],           
    [0x5025 ,0x80],
    [0x3a0f ,0x30],
    [0x3a10 ,0x28],
    [0x3a1b ,0x30],
    [0x3a1e ,0x28],
    [0x3a11 ,0x61],
    [0x3a1f ,0x10],
    [0x5688 ,0xfd],
    [0x5689 ,0xdf],
    [0x568a ,0xfe],
    [0x568b ,0xef],
    [0x568c ,0xfe],
    [0x568d ,0xef],
    [0x568e ,0xaa],
    [0x568f ,0xaa],
    [0xffff,0xff],
]        

OV5642_JPEG_Capture_QSXGA = [
    [0x3503 ,0x07],
    [0x3000 ,0x00],
    [0x3001 ,0x00],	
    [0x3002 ,0x00],	
    [0x3003 ,0x00],	
    [0x3005 ,0xff],	
    [0x3006 ,0xff],	
    [0x3007 ,0x3f],	
    [0x350c ,0x07],	
    [0x350d ,0xd0],	
    [0x3602 ,0xe4],	
    [0x3612 ,0xac],	
    [0x3613 ,0x44],	
    [0x3621 ,0x27],	
    [0x3622 ,0x08],	
    [0x3623 ,0x22],	
    [0x3604 ,0x60],	
    [0x3705 ,0xda],	
    [0x370a ,0x80],	
    [0x3801 ,0x8a],	
    [0x3803 ,0x0a],	
    [0x3804 ,0x0a],	
    [0x3805 ,0x20],	
    [0x3806 ,0x07],	
    [0x3807 ,0x98],	
    [0x3808 ,0x0a],	
    [0x3809 ,0x20],	
    [0x380a ,0x07],	
    [0x380b ,0x98],	
    [0x380c ,0x0c],	
    [0x380d ,0x80],	
    [0x380e ,0x07],	
    [0x380f ,0xd0],	
    [0x3810 ,0xc2],
    [0x3815 ,0x44],
    [0x3818 ,0xc8],	
    [0x3824 ,0x01],	
    [0x3827 ,0x0a],	
    [0x3a00 ,0x78],	
    [0x3a0d ,0x10],	
    [0x3a0e ,0x0d],	
    [0x3a10 ,0x32],	
    [0x3a1b ,0x3c],	
    [0x3a1e ,0x32],	
    [0x3a11 ,0x80],	
    [0x3a1f ,0x20],	
    [0x3a00 ,0x78],	
    [0x460b ,0x35],	
    [0x471d ,0x00],	
    [0x4713 ,0x03],	
    [0x471c ,0x50],	
    [0x5682 ,0x0a],	
    [0x5683 ,0x20],	
    [0x5686 ,0x07],	
    [0x5687 ,0x98],	
    [0x5001 ,0x4f],	
    [0x589b ,0x00], 
    [0x589a ,0xc0],	
    [0x4407 ,0x08],	
    [0x589b ,0x00],	
    [0x589a ,0xc0],	
    [0x3002 ,0x0c],	
    [0x3002 ,0x00],	
    [0x3503 ,0x00],	
    [0x5025, 0x80],
    [0x3a0f, 0x48],
    [0x3a10, 0x40],
    [0x3a1b, 0x4a],
    [0x3a1e, 0x3e],
    [0x3a11, 0x70],
    [0x3a1f, 0x20],
    [0xffff, 0xff],
]


class Camera(object):
    def __init__(self):
        self.CameraMode=JPEG
        self.SPI_CS=digitalio.DigitalInOut(CAM_CS)
        self.SPI_CS.direction = digitalio.Direction.OUTPUT
        self.I2cAddress=0x30
        self.spi = busio.SPI(clock=CAM_SCK, MOSI=CAM_MOSI, MISO=CAM_MISO)
        while not self.spi.try_lock():
            pass
        self.spi.configure(baudrate=4000000,polarity=0,phase=0,bits=8)
        self.i2c = bitbangio.I2C(scl=CAM_SCL, sda=CAM_SDA,frequency=1000000)
        while not self.i2c.try_lock():
            pass
        print(self.i2c.scan())
        self.Spi_write(0x07,0x80)
        utime.sleep(0.1)
        self.Spi_write(0x07,0x00)
        utime.sleep(0.1)
        
        
    def Camera_Detection(self):
        while True:
            self.I2cAddress=0x3c
            self.wrSensorReg16_8(0xff,0x01)
            id_h=self.rdSensorReg16_8(OV5642_CHIPID_HIGH)
            id_l=self.rdSensorReg16_8(OV5642_CHIPID_LOW)
            if((id_h==0x56)and(id_l==0x42)):
                print('CameraType is OV5642')
                break
            else:
                print('Can\'t find OV5642 module')
            utime.sleep(1)
            
    def Set_Camera_mode(self,mode):
        self.CameraMode=mode
    
    def wrSensorReg16_8(self,addr,val):
        buffer=bytearray(3)
        buffer[0]=(addr>>8)&0xff
        buffer[1]=addr&0xff
        buffer[2]=val
        self.iic_write(buffer)
        utime.sleep(0.003)

    def rdSensorReg16_8(self,addr):
        buffer=bytearray(2)
        rt=bytearray(1)
        buffer[0]=(addr>>8)&0xff
        buffer[1]=addr&0xff
        self.iic_write(buffer)
        self.iic_readinto(rt)
        return rt[0]
    
    def wrSensorReg8_8(self,addr,val):
        buffer=bytearray(2)
        buffer[0]=addr
        buffer[1]=val
        self.iic_write(buffer)
        
    def iic_write(self, buf, *, start=0, end=None):
        if end is None:
            end = len(buf)
        self.i2c.writeto(self.I2cAddress, buf, start=start, end=end)

    def iic_readinto(self, buf, *, start=0, end=None):
        if end is None:
            end = len(buf)
        self.i2c.readfrom_into(self.I2cAddress, buf, start=start, end=end)
        
    def rdSensorReg8_8(self,addr):
        buffer=bytearray(1)
        buffer[0]=addr
        self.iic_write(buffer)
        self.iic_readinto(buffer)
        return buffer[0]
    def Spi_Test(self):
        while True:
            self.Spi_write(0X00,0X01)
            value=self.Spi_read(0X00)
            if(value[0]==0X01):
                print('SPI interface OK')
                break
            else:
                print(value[0])
                print('SPI interface Error')
            utime.sleep(1)

    def Camera_Init(self):
        self.wrSensorReg16_8(0x3008, 0x80)
        if self.CameraMode == RAW:
            self.wrSensorRegs16_8(OV5642_1280x960_RAW)
            self.wrSensorRegs16_8(OV5642_640x480_RAW)
        else:
            self.wrSensorRegs16_8(OV5642_QVGA_Preview1)
            self.wrSensorRegs16_8(OV5642_QVGA_Preview2)
            utime.sleep(0.1)
            if self.CameraMode == JPEG:
                utime.sleep(0.1)
                self.wrSensorRegs16_8(OV5642_JPEG_Capture_QSXGA)
                self.wrSensorRegs16_8(ov5642_320x240)
                utime.sleep(0.1)
                self.wrSensorReg16_8(0x3818, 0xa8)
                self.wrSensorReg16_8(0x3621, 0x10)
                self.wrSensorReg16_8(0x3801, 0xb0)
                self.wrSensorReg16_8(0x4407, 0x04)
            else:
                reg_val
                self.wrSensorReg16_8(0x4740, 0x21)
                self.wrSensorReg16_8(0x501e, 0x2a)
                self.wrSensorReg16_8(0x5002, 0xf8)
                self.wrSensorReg16_8(0x501f, 0x01)
                self.wrSensorReg16_8(0x4300, 0x61)
                reg_val=self.rdSensorReg16_8(0x3818)
                self.wrSensorReg16_8(0x3818, (reg_val | 0x60) & 0xff)
                reg_val=self.rdSensorReg16_8(0x3621)
                self.wrSensorReg16_8(0x3621, reg_val & 0xdf)
        
    def Spi_write(self,address,value):
        maskbits = 0x80
        buffer=bytearray(2)
        buffer[0]=address | maskbits
        buffer[1]=value
        self.SPI_CS_LOW()
        self.spi_write(buffer)
        self.SPI_CS_HIGH()
        
    def Spi_read(self,address):
        maskbits = 0x7f
        buffer=bytearray(1)
        buffer[0]=address & maskbits
        self.SPI_CS_LOW()
        self.spi_write(buffer)
        self.spi_readinto(buffer)
        self.SPI_CS_HIGH()
        return buffer

    def spi_write(self, buf, *, start=0, end=None):
        if end is None:
            end = len(buf)
        self.spi.write(buf, start=start, end=end)

    def spi_readinto(self, buf, *, start=0, end=None):
        if end is None:
            end = len(buf)
        self.spi.readinto(buf, start=start, end=end)
        
    def get_bit(self,addr,bit):
        value=self.Spi_read(addr)[0]
        return value&bit
  
    def SPI_CS_LOW(self):
        self.SPI_CS.value=False
        
    def SPI_CS_HIGH(self):
        self.SPI_CS.value=True
        
    def set_fifo_burst(self):
        buffer=bytearray(1)
        buffer[0]=0x3c
        self.spi.write(buffer, start=0, end=1)
        
    def clear_fifo_flag(self):
        self.Spi_write(0x04,0x01)
        
    def flush_fifo(self):
        self.Spi_write(0x04,0x01)
        
    def start_capture(self):
        self.Spi_write(0x04,0x02)
        
    def read_fifo_length(self):
        len1=self.Spi_read(0x42)[0]
        len2=self.Spi_read(0x43)[0]
        len3=self.Spi_read(0x44)[0]
        len3=len3 & 0x7f
        length=((len3<<16)|(len2<<8)|(len1))& 0x07fffff
        return length
    
    def wrSensorRegs8_8(self,reg_value):
        for data in reg_value:
            addr = data[0]
            val = data[1]
            if (addr == 0xff and val == 0xff):
                return
            self.wrSensorReg8_8(addr, val)
            utime.sleep(0.001)
            
    def wrSensorRegs16_8(self,reg_value):
        for data in reg_value:
            addr = data[0]
            val = data[1]
            if (addr == 0xffff and val == 0xff):
                return
            self.wrSensorReg16_8(addr, val)
            
    def set_format(self,mode):
        if mode==BMP or mode==JPEG or mode==RAW:   
            self.CameraMode=mode
            
    def set_bit(self,addr,bit):
        temp=self.Spi_read(addr)[0]
        self.Spi_write(addr,temp&(~bit))
    
    def OV5642_set_JPEG_size(self,size):
        if size== OV5642_320x240:
          self.wrSensorRegs16_8(ov5642_320x240)
        elif size== OV5642_640x480:
          self.wrSensorRegs16_8(ov5642_640x480)     
        elif size== OV5642_1024x768:
          self.wrSensorRegs16_8(ov5642_1024x768)      
        elif size== OV5642_1280x960:
          self.wrSensorRegs16_8(ov5642_1280x960)      
        elif size== OV5642_1600x1200:
          self.wrSensorRegs16_8(ov5642_1600x1200)      
        elif size== OV5642_2048x1536:
          self.wrSensorRegs16_8(ov5642_2048x1536)      
        elif size== OV5642_2592x1944:
          self.wrSensorRegs16_8(ov5642_2592x1944)      
        else:
          self.wrSensorRegs16_8(ov5642_320x240)
 
    def OV5642_set_Light_Mode(self,Light_Mode):
        if Light_Mode== Advanced_AWB:
            self.wrSensorReg16_8(0x3406 ,0x0 )
            self.wrSensorReg16_8(0x5192 ,0x04)
            self.wrSensorReg16_8(0x5191 ,0xf8)
            self.wrSensorReg16_8(0x518d ,0x26)
            self.wrSensorReg16_8(0x518f ,0x42)
            self.wrSensorReg16_8(0x518e ,0x2b)
            self.wrSensorReg16_8(0x5190 ,0x42)
            self.wrSensorReg16_8(0x518b ,0xd0)
            self.wrSensorReg16_8(0x518c ,0xbd)
            self.wrSensorReg16_8(0x5187 ,0x18)
            self.wrSensorReg16_8(0x5188 ,0x18)
            self.wrSensorReg16_8(0x5189 ,0x56)
            self.wrSensorReg16_8(0x518a ,0x5c)
            self.wrSensorReg16_8(0x5186 ,0x1c)
            self.wrSensorReg16_8(0x5181 ,0x50)
            self.wrSensorReg16_8(0x5184 ,0x20)
            self.wrSensorReg16_8(0x5182 ,0x11)
            self.wrSensorReg16_8(0x5183 ,0x0 )	
        elif Light_Mode== Simple_AWB:
            self.wrSensorReg16_8(0x3406 ,0x00)
            self.wrSensorReg16_8(0x5183 ,0x80)
            self.wrSensorReg16_8(0x5191 ,0xff)
            self.wrSensorReg16_8(0x5192 ,0x00)
        elif Light_Mode== Manual_day:
            self.wrSensorReg16_8(0x3406 ,0x1 )
            self.wrSensorReg16_8(0x3400 ,0x7 )
            self.wrSensorReg16_8(0x3401 ,0x32)
            self.wrSensorReg16_8(0x3402 ,0x4 )
            self.wrSensorReg16_8(0x3403 ,0x0 )
            self.wrSensorReg16_8(0x3404 ,0x5 )
            self.wrSensorReg16_8(0x3405 ,0x36)
        elif Light_Mode== Manual_A:
            self.wrSensorReg16_8(0x3406 ,0x1 )
            self.wrSensorReg16_8(0x3400 ,0x4 )
            self.wrSensorReg16_8(0x3401 ,0x88)
            self.wrSensorReg16_8(0x3402 ,0x4 )
            self.wrSensorReg16_8(0x3403 ,0x0 )
            self.wrSensorReg16_8(0x3404 ,0x8 )
            self.wrSensorReg16_8(0x3405 ,0xb6)
        elif Light_Mode== Manual_cwf:
            self.wrSensorReg16_8(0x3406 ,0x1 )
            self.wrSensorReg16_8(0x3400 ,0x6 )
            self.wrSensorReg16_8(0x3401 ,0x13)
            self.wrSensorReg16_8(0x3402 ,0x4 )
            self.wrSensorReg16_8(0x3403 ,0x0 )
            self.wrSensorReg16_8(0x3404 ,0x7 )
            self.wrSensorReg16_8(0x3405 ,0xe2)
        elif Light_Mode== Manual_cloudy:
            self.wrSensorReg16_8(0x3406 ,0x1 )
            self.wrSensorReg16_8(0x3400 ,0x7 )
            self.wrSensorReg16_8(0x3401 ,0x88)
            self.wrSensorReg16_8(0x3402 ,0x4 )
            self.wrSensorReg16_8(0x3403 ,0x0 )
            self.wrSensorReg16_8(0x3404 ,0x5 )
            self.wrSensorReg16_8(0x3405 ,0x0)

    def OV5642_set_Color_Saturation(self,Color_Saturation):       
        if Color_Saturation== Saturation4:
            self.wrSensorReg16_8(0x5001 ,0xff)
            self.wrSensorReg16_8(0x5583 ,0x80)
            self.wrSensorReg16_8(0x5584 ,0x80)
            self.wrSensorReg16_8(0x5580 ,0x02)
        elif Color_Saturation== Saturation3:
            self.wrSensorReg16_8(0x5001 ,0xff)
            self.wrSensorReg16_8(0x5583 ,0x70)
            self.wrSensorReg16_8(0x5584 ,0x70)
            self.wrSensorReg16_8(0x5580 ,0x02)
        elif Color_Saturation== Saturation2:
            self.wrSensorReg16_8(0x5001 ,0xff)
            self.wrSensorReg16_8(0x5583 ,0x60)
            self.wrSensorReg16_8(0x5584 ,0x60)
            self.wrSensorReg16_8(0x5580 ,0x02)
        elif Color_Saturation== Saturation1:
            self.wrSensorReg16_8(0x5001 ,0xff)
            self.wrSensorReg16_8(0x5583 ,0x50)
            self.wrSensorReg16_8(0x5584 ,0x50)
            self.wrSensorReg16_8(0x5580 ,0x02)
        elif Color_Saturation== Saturation0:
            self.wrSensorReg16_8(0x5001 ,0xff)
            self.wrSensorReg16_8(0x5583 ,0x40)
            self.wrSensorReg16_8(0x5584 ,0x40)
            self.wrSensorReg16_8(0x5580 ,0x02)
        elif Color_Saturation== Saturation_1:
            self.wrSensorReg16_8(0x5001 ,0xff)
            self.wrSensorReg16_8(0x5583 ,0x30)
            self.wrSensorReg16_8(0x5584 ,0x30)
            self.wrSensorReg16_8(0x5580 ,0x02)
        elif Color_Saturation== Saturation_2:
            self.wrSensorReg16_8(0x5001 ,0xff)
            self.wrSensorReg16_8(0x5583 ,0x20)
            self.wrSensorReg16_8(0x5584 ,0x20)
            self.wrSensorReg16_8(0x5580 ,0x02)
        elif Color_Saturation== Saturation_3:
            self.wrSensorReg16_8(0x5001 ,0xff)
            self.wrSensorReg16_8(0x5583 ,0x10)
            self.wrSensorReg16_8(0x5584 ,0x10)
            self.wrSensorReg16_8(0x5580 ,0x02)
        elif Color_Saturation== Saturation_4:
            self.wrSensorReg16_8(0x5001 ,0xff)
            self.wrSensorReg16_8(0x5583 ,0x00)
            self.wrSensorReg16_8(0x5584 ,0x00)
            self.wrSensorReg16_8(0x5580 ,0x02)
                 
    def OV5642_set_Brightness(self,Brightness):
        if Brightness== Brightness4:
            self.wrSensorReg16_8(0x5001 ,0xff)
            self.wrSensorReg16_8(0x5589 ,0x40)
            self.wrSensorReg16_8(0x5580 ,0x04)
            self.wrSensorReg16_8(0x558a ,0x00)
        elif Brightness== Brightness3:
            self.wrSensorReg16_8(0x5001 ,0xff)
            self.wrSensorReg16_8(0x5589 ,0x30)
            self.wrSensorReg16_8(0x5580 ,0x04)
            self.wrSensorReg16_8(0x558a ,0x00)
        elif Brightness== Brightness2:
            self.wrSensorReg16_8(0x5001 ,0xff)
            self.wrSensorReg16_8(0x5589 ,0x20)
            self.wrSensorReg16_8(0x5580 ,0x04)
            self.wrSensorReg16_8(0x558a ,0x00)
        elif Brightness== Brightness1:
            self.wrSensorReg16_8(0x5001 ,0xff)
            self.wrSensorReg16_8(0x5589 ,0x10)
            self.wrSensorReg16_8(0x5580 ,0x04)
            self.wrSensorReg16_8(0x558a ,0x00)
        elif Brightness== Brightness0:
            self.wrSensorReg16_8(0x5001 ,0xff)
            self.wrSensorReg16_8(0x5589 ,0x00)
            self.wrSensorReg16_8(0x5580 ,0x04)
            self.wrSensorReg16_8(0x558a ,0x00)
        elif Brightness== Brightness_1:
            self.wrSensorReg16_8(0x5001 ,0xff)
            self.wrSensorReg16_8(0x5589 ,0x10)
            self.wrSensorReg16_8(0x5580 ,0x04)
            self.wrSensorReg16_8(0x558a ,0x08)
        elif Brightness== Brightness_2:
            self.wrSensorReg16_8(0x5001 ,0xff)
            self.wrSensorReg16_8(0x5589 ,0x20)
            self.wrSensorReg16_8(0x5580 ,0x04)
            self.wrSensorReg16_8(0x558a ,0x08)
        elif Brightness== Brightness_3:
            self.wrSensorReg16_8(0x5001 ,0xff)
            self.wrSensorReg16_8(0x5589 ,0x30)
            self.wrSensorReg16_8(0x5580 ,0x04)
            self.wrSensorReg16_8(0x558a ,0x08)
        elif Brightness== Brightness_4:
            self.wrSensorReg16_8(0x5001 ,0xff)
            self.wrSensorReg16_8(0x5589 ,0x40)
            self.wrSensorReg16_8(0x5580 ,0x04)
            self.wrSensorReg16_8(0x558a ,0x08)
            
    def OV5642_set_Contrast(self,Contrast):
        if Contrast== Contrast4:
            self.wrSensorReg16_8(0x5001 ,0xff)
            self.wrSensorReg16_8(0x5580 ,0x04)
            self.wrSensorReg16_8(0x5587 ,0x30)
            self.wrSensorReg16_8(0x5588 ,0x30)
            self.wrSensorReg16_8(0x558a ,0x00)
        elif Contrast== Contrast3:
            self.wrSensorReg16_8(0x5001 ,0xff)
            self.wrSensorReg16_8(0x5580 ,0x04)
            self.wrSensorReg16_8(0x5587 ,0x2c)
            self.wrSensorReg16_8(0x5588 ,0x2c)
            self.wrSensorReg16_8(0x558a ,0x00)
        elif Contrast== Contrast2:
            self.wrSensorReg16_8(0x5001 ,0xff)
            self.wrSensorReg16_8(0x5580 ,0x04)
            self.wrSensorReg16_8(0x5587 ,0x28)
            self.wrSensorReg16_8(0x5588 ,0x28)
            self.wrSensorReg16_8(0x558a ,0x00)
        elif Contrast== Contrast1:
            self.wrSensorReg16_8(0x5001 ,0xff)
            self.wrSensorReg16_8(0x5580 ,0x04)
            self.wrSensorReg16_8(0x5587 ,0x24)
            self.wrSensorReg16_8(0x5588 ,0x24)
            self.wrSensorReg16_8(0x558a ,0x00)
        elif Contrast== Contrast0:
            self.wrSensorReg16_8(0x5001 ,0xff)
            self.wrSensorReg16_8(0x5580 ,0x04)
            self.wrSensorReg16_8(0x5587 ,0x20)
            self.wrSensorReg16_8(0x5588 ,0x20)
            self.wrSensorReg16_8(0x558a ,0x00)
        elif Contrast== Contrast_1:
            self.wrSensorReg16_8(0x5001 ,0xff)
            self.wrSensorReg16_8(0x5580 ,0x04)
            self.wrSensorReg16_8(0x5587 ,0x1C)
            self.wrSensorReg16_8(0x5588 ,0x1C)
            self.wrSensorReg16_8(0x558a ,0x1C)
        elif Contrast== Contrast_2:
            self.wrSensorReg16_8(0x5001 ,0xff)
            self.wrSensorReg16_8(0x5580 ,0x04)
            self.wrSensorReg16_8(0x5587 ,0x18)
            self.wrSensorReg16_8(0x5588 ,0x18)
            self.wrSensorReg16_8(0x558a ,0x00)
        elif Contrast== Contrast_3:
            self.wrSensorReg16_8(0x5001 ,0xff)
            self.wrSensorReg16_8(0x5580 ,0x04)
            self.wrSensorReg16_8(0x5587 ,0x14)
            self.wrSensorReg16_8(0x5588 ,0x14)
            self.wrSensorReg16_8(0x558a ,0x00)
        elif Contrast== Contrast_4:
            self.wrSensorReg16_8(0x5001 ,0xff)
            self.wrSensorReg16_8(0x5580 ,0x04)
            self.wrSensorReg16_8(0x5587 ,0x10)
            self.wrSensorReg16_8(0x5588 ,0x10)
            self.wrSensorReg16_8(0x558a ,0x00)
       
    def OV5642_set_hue(self,degree):
        if degree== degree_180:
            self.wrSensorReg16_8(0x5001 ,0xff)
            self.wrSensorReg16_8(0x5580 ,0x01)
            self.wrSensorReg16_8(0x5581 ,0x80)
            self.wrSensorReg16_8(0x5582 ,0x00)
            self.wrSensorReg16_8(0x558a ,0x32)
        elif degree== degree_150:
            self.wrSensorReg16_8(0x5001 ,0xff)
            self.wrSensorReg16_8(0x5580 ,0x01)
            self.wrSensorReg16_8(0x5581 ,0x6f)
            self.wrSensorReg16_8(0x5582 ,0x40)
            self.wrSensorReg16_8(0x558a ,0x32)
        elif degree== degree_120:
            self.wrSensorReg16_8(0x5001 ,0xff)
            self.wrSensorReg16_8(0x5580 ,0x01)
            self.wrSensorReg16_8(0x5581 ,0x40)
            self.wrSensorReg16_8(0x5582 ,0x6f)
            self.wrSensorReg16_8(0x558a ,0x32)
        elif degree== degree_90:
            self.wrSensorReg16_8(0x5001 ,0xff)
            self.wrSensorReg16_8(0x5580 ,0x01)
            self.wrSensorReg16_8(0x5581 ,0x00)
            self.wrSensorReg16_8(0x5582 ,0x80)
            self.wrSensorReg16_8(0x558a ,0x02)
        elif degree== degree_60:
            self.wrSensorReg16_8(0x5001 ,0xff)
            self.wrSensorReg16_8(0x5580 ,0x01)
            self.wrSensorReg16_8(0x5581 ,0x40)
            self.wrSensorReg16_8(0x5582 ,0x6f)
            self.wrSensorReg16_8(0x558a ,0x02)
        elif degree== degree_30:
            self.wrSensorReg16_8(0x5001 ,0xff)
            self.wrSensorReg16_8(0x5580 ,0x01)
            self.wrSensorReg16_8(0x5581 ,0x6f)
            self.wrSensorReg16_8(0x5582 ,0x40)
            self.wrSensorReg16_8(0x558a ,0x02)
        elif degree== degree_0:
            self.wrSensorReg16_8(0x5001 ,0xff)
            self.wrSensorReg16_8(0x5580 ,0x01)
            self.wrSensorReg16_8(0x5581 ,0x80)
            self.wrSensorReg16_8(0x5582 ,0x00)
            self.wrSensorReg16_8(0x558a ,0x01)
        elif degree== degree30:
            self.wrSensorReg16_8(0x5001 ,0xff)
            self.wrSensorReg16_8(0x5580 ,0x01)
            self.wrSensorReg16_8(0x5581 ,0x6f)
            self.wrSensorReg16_8(0x5582 ,0x40)
            self.wrSensorReg16_8(0x558a ,0x01)
        elif degree== degree60:
            self.wrSensorReg16_8(0x5001 ,0xff)
            self.wrSensorReg16_8(0x5580 ,0x01)
            self.wrSensorReg16_8(0x5581 ,0x40)
            self.wrSensorReg16_8(0x5582 ,0x6f)
            self.wrSensorReg16_8(0x558a ,0x01)
        elif degree== degree90:
            self.wrSensorReg16_8(0x5001 ,0xff)
            self.wrSensorReg16_8(0x5580 ,0x01)
            self.wrSensorReg16_8(0x5581 ,0x00)
            self.wrSensorReg16_8(0x5582 ,0x80)
            self.wrSensorReg16_8(0x558a ,0x31)
        elif degree== degree120:
            self.wrSensorReg16_8(0x5001 ,0xff)
            self.wrSensorReg16_8(0x5580 ,0x01)
            self.wrSensorReg16_8(0x5581 ,0x40)
            self.wrSensorReg16_8(0x5582 ,0x6f)
            self.wrSensorReg16_8(0x558a ,0x31)
        elif degree== degree150:
            self.wrSensorReg16_8(0x5001 ,0xff)
            self.wrSensorReg16_8(0x5580 ,0x01)
            self.wrSensorReg16_8(0x5581 ,0x6f)
            self.wrSensorReg16_8(0x5582 ,0x40)
            self.wrSensorReg16_8(0x558a ,0x31)
      
    def OV5642_set_Special_effects(self,Special_effect):
        if  Special_effect== Bluish:
            self.wrSensorReg16_8(0x5001 ,0xff)
            self.wrSensorReg16_8(0x5580 ,0x18)
            self.wrSensorReg16_8(0x5585 ,0xa0)
            self.wrSensorReg16_8(0x5586 ,0x40)			
        elif  Special_effect== Greenish:
            self.wrSensorReg16_8(0x5001 ,0xff)
            self.wrSensorReg16_8(0x5580 ,0x18)
            self.wrSensorReg16_8(0x5585 ,0x60)
            self.wrSensorReg16_8(0x5586 ,0x60)			
        elif  Special_effect== Reddish:
            self.wrSensorReg16_8(0x5001 ,0xff)
            self.wrSensorReg16_8(0x5580 ,0x18)
            self.wrSensorReg16_8(0x5585 ,0x80)
            self.wrSensorReg16_8(0x5586 ,0xc0)			
        elif  Special_effect== BW:
            self.wrSensorReg16_8(0x5001 ,0xff)
            self.wrSensorReg16_8(0x5580 ,0x18)
            self.wrSensorReg16_8(0x5585 ,0x80)
            self.wrSensorReg16_8(0x5586 ,0x80)			
        elif  Special_effect== Negative:
            self.wrSensorReg16_8(0x5001 ,0xff)
            self.wrSensorReg16_8(0x5580 ,0x40)
        elif  Special_effect== Sepia:
            self.wrSensorReg16_8(0x5001 ,0xff)
            self.wrSensorReg16_8(0x5580 ,0x18)
            self.wrSensorReg16_8(0x5585 ,0x40)
            self.wrSensorReg16_8(0x5586 ,0xa0)		
        elif  Special_effect== Normal:
            self.wrSensorReg16_8(0x5001 ,0x7f)
            self.wrSensorReg16_8(0x5580 ,0x00)
            
    def OV5642_set_Exposure_level(self,level):
        if level== Exposure_17_EV:
            self.wrSensorReg16_8(0x3a0f ,0x10)
            self.wrSensorReg16_8(0x3a10 ,0x08)
            self.wrSensorReg16_8(0x3a1b ,0x10)
            self.wrSensorReg16_8(0x3a1e ,0x08)
            self.wrSensorReg16_8(0x3a11 ,0x20)
            self.wrSensorReg16_8(0x3a1f ,0x10)
        elif level== Exposure_13_EV:
            self.wrSensorReg16_8(0x3a0f ,0x18)
            self.wrSensorReg16_8(0x3a10 ,0x10)
            self.wrSensorReg16_8(0x3a1b ,0x18)
            self.wrSensorReg16_8(0x3a1e ,0x10)
            self.wrSensorReg16_8(0x3a11 ,0x30)
            self.wrSensorReg16_8(0x3a1f ,0x10)
        elif level== Exposure_10_EV:
            self.wrSensorReg16_8(0x3a0f ,0x20)
            self.wrSensorReg16_8(0x3a10 ,0x18)
            self.wrSensorReg16_8(0x3a11 ,0x41)
            self.wrSensorReg16_8(0x3a1b ,0x20)
            self.wrSensorReg16_8(0x3a1e ,0x18)
            self.wrSensorReg16_8(0x3a1f ,0x10)
        elif level== Exposure_07_EV:
            self.wrSensorReg16_8(0x3a0f ,0x28)
            self.wrSensorReg16_8(0x3a10 ,0x20)
            self.wrSensorReg16_8(0x3a11 ,0x51)
            self.wrSensorReg16_8(0x3a1b ,0x28)
            self.wrSensorReg16_8(0x3a1e ,0x20)
            self.wrSensorReg16_8(0x3a1f ,0x10)
        elif level== Exposure_03_EV:
            self.wrSensorReg16_8(0x3a0f ,0x30)
            self.wrSensorReg16_8(0x3a10 ,0x28)
            self.wrSensorReg16_8(0x3a11 ,0x61)
            self.wrSensorReg16_8(0x3a1b ,0x30)
            self.wrSensorReg16_8(0x3a1e ,0x28)
            self.wrSensorReg16_8(0x3a1f ,0x10)
        elif level== Exposure_default:
            self.wrSensorReg16_8(0x3a0f ,0x38)
            self.wrSensorReg16_8(0x3a10 ,0x30)
            self.wrSensorReg16_8(0x3a11 ,0x61)
            self.wrSensorReg16_8(0x3a1b ,0x38)
            self.wrSensorReg16_8(0x3a1e ,0x30)
            self.wrSensorReg16_8(0x3a1f ,0x10)
        elif level== Exposure03_EV:
            self.wrSensorReg16_8(0x3a0f ,0x40)
            self.wrSensorReg16_8(0x3a10 ,0x38)
            self.wrSensorReg16_8(0x3a11 ,0x71)
            self.wrSensorReg16_8(0x3a1b ,0x40)
            self.wrSensorReg16_8(0x3a1e ,0x38)
            self.wrSensorReg16_8(0x3a1f ,0x10)
        elif level== Exposure07_EV:
            self.wrSensorReg16_8(0x3a0f ,0x48)
            self.wrSensorReg16_8(0x3a10 ,0x40)
            self.wrSensorReg16_8(0x3a11 ,0x80)
            self.wrSensorReg16_8(0x3a1b ,0x48)
            self.wrSensorReg16_8(0x3a1e ,0x40)
            self.wrSensorReg16_8(0x3a1f ,0x20)
        elif level== Exposure10_EV:
            self.wrSensorReg16_8(0x3a0f ,0x50)
            self.wrSensorReg16_8(0x3a10 ,0x48)
            self.wrSensorReg16_8(0x3a11 ,0x90)
            self.wrSensorReg16_8(0x3a1b ,0x50)
            self.wrSensorReg16_8(0x3a1e ,0x48)
            self.wrSensorReg16_8(0x3a1f ,0x20)
        elif level== Exposure13_EV:
            self.wrSensorReg16_8(0x3a0f ,0x58)
            self.wrSensorReg16_8(0x3a10 ,0x50)
            self.wrSensorReg16_8(0x3a11 ,0x91)
            self.wrSensorReg16_8(0x3a1b ,0x58)
            self.wrSensorReg16_8(0x3a1e ,0x50)
            self.wrSensorReg16_8(0x3a1f ,0x20)
        elif level== Exposure17_EV:
            self.wrSensorReg16_8(0x3a0f ,0x60)
            self.wrSensorReg16_8(0x3a10 ,0x58)
            self.wrSensorReg16_8(0x3a11 ,0xa0)
            self.wrSensorReg16_8(0x3a1b ,0x60)
            self.wrSensorReg16_8(0x3a1e ,0x58)
            self.wrSensorReg16_8(0x3a1f ,0x20)
            
    def OV5642_set_Sharpness(self,Sharpness):
        if Sharpness== Auto_Sharpness_default:
            self.wrSensorReg16_8(0x530A ,0x00)
            self.wrSensorReg16_8(0x530c ,0x0 )
            self.wrSensorReg16_8(0x530d ,0xc )
            self.wrSensorReg16_8(0x5312 ,0x40)
        elif Sharpness== Auto_Sharpness1:
            self.wrSensorReg16_8(0x530A ,0x00)
            self.wrSensorReg16_8(0x530c ,0x4 )
            self.wrSensorReg16_8(0x530d ,0x18)
            self.wrSensorReg16_8(0x5312 ,0x20)
        elif Sharpness== Auto_Sharpness2:
            self.wrSensorReg16_8(0x530A ,0x00)
            self.wrSensorReg16_8(0x530c ,0x8 )
            self.wrSensorReg16_8(0x530d ,0x30)
            self.wrSensorReg16_8(0x5312 ,0x10)
        elif Sharpness== Manual_Sharpnessoff:
            self.wrSensorReg16_8(0x530A ,0x08)
            self.wrSensorReg16_8(0x531e ,0x00)
            self.wrSensorReg16_8(0x531f ,0x00)
        elif Sharpness== Manual_Sharpness1:
            self.wrSensorReg16_8(0x530A ,0x08)
            self.wrSensorReg16_8(0x531e ,0x04)
            self.wrSensorReg16_8(0x531f ,0x04)
        elif Sharpness== Manual_Sharpness2:
            self.wrSensorReg16_8(0x530A ,0x08)
            self.wrSensorReg16_8(0x531e ,0x08)
            self.wrSensorReg16_8(0x531f ,0x08)
        elif Sharpness== Manual_Sharpness3:
            self.wrSensorReg16_8(0x530A ,0x08)
            self.wrSensorReg16_8(0x531e ,0x0c)
            self.wrSensorReg16_8(0x531f ,0x0c)
        elif Sharpness== Manual_Sharpness4:
            self.wrSensorReg16_8(0x530A ,0x08)
            self.wrSensorReg16_8(0x531e ,0x0f)
            self.wrSensorReg16_8(0x531f ,0x0f)
        elif Sharpness== Manual_Sharpness5:
            self.wrSensorReg16_8(0x530A ,0x08)
            self.wrSensorReg16_8(0x531e ,0x1f)
            self.wrSensorReg16_8(0x531f ,0x1f)

    def OV5642_set_Mirror_Flip(self,Mirror_Flip):
        if Mirror_Flip== MIRROR:
            reg_val=self.rdSensorReg16_8(0x3818)
            reg_val = reg_val|0x00
            reg_val = reg_val&0x9F
            self.wrSensorReg16_8(0x3818 ,reg_val)
            reg_val=self.rdSensorReg16_8(0x3621)
            reg_val = reg_val|0x20
            self.wrSensorReg16_8(0x3621, reg_val )
        elif Mirror_Flip== FLIP:
            reg_val=self.rdSensorReg16_8(0x3818)
            reg_val = reg_val|0x20
            reg_val = reg_val&0xbF
            self.wrSensorReg16_8(0x3818 ,reg_val)
            reg_val=self.rdSensorReg16_8(0x3621)
            reg_val = reg_val|0x20
            self.wrSensorReg16_8(0x3621, reg_val )
        elif Mirror_Flip== MIRROR_FLIP:
            reg_val=self.rdSensorReg16_8(0x3818)
            reg_val = reg_val|0x60
            reg_val = reg_val&0xFF
            self.wrSensorReg16_8(0x3818 ,reg_val)
            reg_val=self.rdSensorReg16_8(0x3621)
            reg_val = reg_val&0xdf
            self.wrSensorReg16_8(0x3621, reg_val )
        elif Mirror_Flip== Normal:
            reg_val=self.rdSensorReg16_8(0x3818)
            reg_val = reg_val|0x40
            reg_val = reg_val&0xdF;
            self.wrSensorReg16_8(0x3818 ,reg_val)
            reg_val=self.rdSensorReg16_8(0x3621);
            reg_val = reg_val&0xdf;
            self.wrSensorReg16_8(0x3621, reg_val )

    def OV5642_set_Compress_quality(self,quality):
        if quality== high_quality:
            self.wrSensorReg16_8(0x4407, 0x02)
        elif quality== default_quality:
            self.wrSensorReg16_8(0x4407, 0x04)
        elif quality== low_quality:
            self.wrSensorReg16_8(0x4407, 0x08)
    
    def OV5642_Test_Pattern(self,Pattern):
        if Pattern== Color_bar:
            self.wrSensorReg16_8(0x503d , 0x80)
            self.wrSensorReg16_8(0x503e, 0x00)
        elif Pattern== Color_square:
            self.wrSensorReg16_8(0x503d , 0x85)
            self.wrSensorReg16_8(0x503e, 0x12)
        elif Pattern== BW_square:
            self.wrSensorReg16_8(0x503d , 0x85)
            self.wrSensorReg16_8(0x503e, 0x1a)
        elif Pattern== DLI:
            self.wrSensorReg16_8(0x4741 , 0x4)
